/*
 * =====================================================================================
 *
 *  GameKit
 *
 *  Copyright (C) 2018-2020 Unarelith, Quentin Bazin <openminer@unarelith.net>
 *  Copyright (C) 2020 the GameKit contributors (see CONTRIBUTORS.md)
 *
 *  This file is part of GameKit.
 *
 *  GameKit is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  GameKit is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with GameKit; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
 *
 * =====================================================================================
 */
#include "gk/core/input/KeyboardUtils.hpp"

#define CASE1(key) case sf::Keyboard::key: return #key;
#define CASE2(key) if (name == #key) return sf::Keyboard::key;

namespace gk {

std::string KeyboardUtils::getNameFromKey(sf::Keyboard::Key key) {
	switch(key) {
		default:
		CASE1(Unknown)
		CASE1(A)
		CASE1(B)
		CASE1(C)
		CASE1(D)
		CASE1(E)
		CASE1(F)
		CASE1(G)
		CASE1(H)
		CASE1(I)
		CASE1(J)
		CASE1(K)
		CASE1(L)
		CASE1(M)
		CASE1(N)
		CASE1(O)
		CASE1(P)
		CASE1(Q)
		CASE1(R)
		CASE1(S)
		CASE1(T)
		CASE1(U)
		CASE1(V)
		CASE1(W)
		CASE1(X)
		CASE1(Y)
		CASE1(Z)
		CASE1(Num0)
		CASE1(Num1)
		CASE1(Num2)
		CASE1(Num3)
		CASE1(Num4)
		CASE1(Num5)
		CASE1(Num6)
		CASE1(Num7)
		CASE1(Num8)
		CASE1(Num9)
		CASE1(Escape)
		CASE1(LControl)
		CASE1(LShift)
		CASE1(LAlt)
		CASE1(LSystem)
		CASE1(RControl)
		CASE1(RShift)
		CASE1(RAlt)
		CASE1(RSystem)
		CASE1(Menu)
		CASE1(LBracket)
		CASE1(RBracket)
		CASE1(Semicolon)
		CASE1(Comma)
		CASE1(Period)
		CASE1(Quote)
		CASE1(Slash)
		CASE1(Backslash)
		CASE1(Tilde)
		CASE1(Equal)
		CASE1(Dash)
		CASE1(Space)
		CASE1(Return)
		CASE1(Backspace)
		CASE1(Tab)
		CASE1(PageUp)
		CASE1(PageDown)
		CASE1(End)
		CASE1(Home)
		CASE1(Insert)
		CASE1(Delete)
		CASE1(Add)
		CASE1(Subtract)
		CASE1(Multiply)
		CASE1(Divide)
		CASE1(Left)
		CASE1(Right)
		CASE1(Up)
		CASE1(Down)
		CASE1(Numpad0)
		CASE1(Numpad1)
		CASE1(Numpad2)
		CASE1(Numpad3)
		CASE1(Numpad4)
		CASE1(Numpad5)
		CASE1(Numpad6)
		CASE1(Numpad7)
		CASE1(Numpad8)
		CASE1(Numpad9)
		CASE1(F1)
		CASE1(F2)
		CASE1(F3)
		CASE1(F4)
		CASE1(F5)
		CASE1(F6)
		CASE1(F7)
		CASE1(F8)
		CASE1(F9)
		CASE1(F10)
		CASE1(F11)
		CASE1(F12)
		CASE1(F13)
		CASE1(F14)
		CASE1(F15)
		CASE1(Pause)
	}
}

sf::Keyboard::Key KeyboardUtils::getKeyFromName(const std::string &name) {
	CASE2(A)
	CASE2(B)
	CASE2(C)
	CASE2(D)
	CASE2(E)
	CASE2(F)
	CASE2(G)
	CASE2(H)
	CASE2(I)
	CASE2(J)
	CASE2(K)
	CASE2(L)
	CASE2(M)
	CASE2(N)
	CASE2(O)
	CASE2(P)
	CASE2(Q)
	CASE2(R)
	CASE2(S)
	CASE2(T)
	CASE2(U)
	CASE2(V)
	CASE2(W)
	CASE2(X)
	CASE2(Y)
	CASE2(Z)
	CASE2(Num0)
	CASE2(Num1)
	CASE2(Num2)
	CASE2(Num3)
	CASE2(Num4)
	CASE2(Num5)
	CASE2(Num6)
	CASE2(Num7)
	CASE2(Num8)
	CASE2(Num9)
	CASE2(Escape)
	CASE2(LControl)
	CASE2(LShift)
	CASE2(LAlt)
	CASE2(LSystem)
	CASE2(RControl)
	CASE2(RShift)
	CASE2(RAlt)
	CASE2(RSystem)
	CASE2(Menu)
	CASE2(LBracket)
	CASE2(RBracket)
	CASE2(Semicolon)
	CASE2(Comma)
	CASE2(Period)
	CASE2(Quote)
	CASE2(Slash)
	CASE2(Backslash)
	CASE2(Tilde)
	CASE2(Equal)
	CASE2(Dash)
	CASE2(Space)
	CASE2(Return)
	CASE2(Backspace)
	CASE2(Tab)
	CASE2(PageUp)
	CASE2(PageDown)
	CASE2(End)
	CASE2(Home)
	CASE2(Insert)
	CASE2(Delete)
	CASE2(Add)
	CASE2(Subtract)
	CASE2(Multiply)
	CASE2(Divide)
	CASE2(Left)
	CASE2(Right)
	CASE2(Up)
	CASE2(Down)
	CASE2(Numpad0)
	CASE2(Numpad1)
	CASE2(Numpad2)
	CASE2(Numpad3)
	CASE2(Numpad4)
	CASE2(Numpad5)
	CASE2(Numpad6)
	CASE2(Numpad7)
	CASE2(Numpad8)
	CASE2(Numpad9)
	CASE2(F1)
	CASE2(F2)
	CASE2(F3)
	CASE2(F4)
	CASE2(F5)
	CASE2(F6)
	CASE2(F7)
	CASE2(F8)
	CASE2(F9)
	CASE2(F10)
	CASE2(F11)
	CASE2(F12)
	CASE2(F13)
	CASE2(F14)
	CASE2(F15)
	CASE2(Pause)

	return sf::Keyboard::Unknown;
}

} // namespace gk
